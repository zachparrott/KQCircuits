<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Tests for profiling groundgrid creation time</description>
 <version>0.1</version>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name>misc</group-name>
 <menu-path>kqcircuits_menu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># This code is part of KQCircuits
# Copyright (C) 2021 IQM Finland Oy
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# https://www.gnu.org/licenses/gpl-3.0.html.
#
# The software distribution should follow IQM trademark policy for open-source software
# (meetiqm.com/iqm-open-source-trademark-policy). IQM welcomes contributions to the code.
# Please see our contribution agreements for individuals (meetiqm.com/iqm-individual-contributor-license-agreement)
# and organizations (meetiqm.com/iqm-organization-contributor-license-agreement).


import numpy
import time

from kqcircuits.pya_resolver import pya
from kqcircuits.defaults import default_layers
from kqcircuits.chips.demo import Demo
from kqcircuits.util.groundgrid import make_ground_grid_region
from kqcircuits.klayout_view import KLayoutView

view = KLayoutView()
layout = view.layout

# Top cell
cell = Demo.create(layout) # A new cell into the layout
view.focus(cell)

protection = pya.Region(cell.begin_shapes_rec(layout.layer(default_layers["1t1_ground_grid_avoidance"]))).merged()
cell.shapes(layout.layer(default_layers["annotations"])).insert(protection)

def empty_regions(protection, box, deph=0, n = 3, debuglayer=-99):
  polygons=[]
  if deph&lt;0:
    return polygons


  grid_region = pya.Region(box)
  overlaping_regions = grid_region.overlapping(protection)
  if (overlaping_regions.is_empty()):
    cell.shapes(debuglayer).insert(grid_region)
    return polygons
  else:
    for x in numpy.linspace(box.p1.x, box.p2.x, n, endpoint=False):
      for y in numpy.linspace(box.p1.y, box.p2.y, n, endpoint=False):
        subbox = pya.Box(pya.Point(x,y), pya.Point(x+box.width()/n,y+box.height()/n))
        empty_regions(protection, subbox,deph-1, n, debuglayer)

#fill_grid(pya.DBox(cell.bbox().p1*layout.dbu,cell.bbox().p2*layout.dbu),layout.layer(default_layers["1t1_ground_grid"]))

if False:
  start = time.time()

  empty_regions(protection, pya.Box(cell.bbox().p1,cell.bbox().p2),
    deph=2,
    n=2,
    debuglayer=layout.layer(default_layers["1t1_SIS_junction"])
    )

  end = time.time()
  print(f"Elapsed time: {end - start} s")

if False:
  start = time.time()

  empty_regions(protection, pya.Box(cell.bbox().p1,cell.bbox().p2),
    deph=1,
    n=8,
    debuglayer=layout.layer(default_layers["1t1_SIS_shadow"]))
  end = time.time()
  print(f"Elapsed time: {end - start} s")

grid_mag_factor = 1

if True:
  start = time.time()
  grid_area = pya.Box(cell.bbox().p1, cell.bbox().p2)
  protection = pya.Region(cell.begin_shapes_rec(layout.layer(default_layers["1t1_ground_grid_avoidance"]))).merged()

  region_ground_grid = make_ground_grid_region(grid_area, protection, grid_step = 10*(1/layout.dbu)*grid_mag_factor, grid_size = 5*(1/layout.dbu)*grid_mag_factor )

  cell.shapes(layout.layer(default_layers["annotations"])).insert(protection)
  cell.shapes(layout.layer(default_layers["1t1_ground_grid"])).insert(region_ground_grid)

  end = time.time()
  print(f"Elapsed time: {end - start} s")

#protection = pya.Region(cell.begin_shapes_rec(layout.layer(default_layers["1t1_ground_grid_avoidance"]))).merged()</text>
</klayout-macro>
